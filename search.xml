<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[inttypes.h]]></title>
      <url>/2017/10/12/inttypes-h/</url>
      <content type="html"><![CDATA[<h1 id="uint8-t-uint16-t-uint32-t-uint64-t"><a href="#uint8-t-uint16-t-uint32-t-uint64-t" class="headerlink" title="uint8_t / uint16_t / uint32_t /uint64_t"></a>uint8_t / uint16_t / uint32_t /uint64_t</h1><p>_t可以理解为对结构的标注</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>   <span class="keyword">uint8_t</span>;     <span class="comment">//无符号8位数</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span>   <span class="keyword">char</span>   <span class="keyword">int8_t</span>;      <span class="comment">//有符号8位数</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>    <span class="keyword">uint16_t</span>;    <span class="comment">//无符号16位数</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span>   <span class="keyword">int</span>    <span class="keyword">int16_t</span>;     <span class="comment">//有符号16位数</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>   <span class="keyword">uint32_t</span>;    <span class="comment">//无符号32位数</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span>   <span class="keyword">long</span>   <span class="keyword">int32_t</span>;     <span class="comment">//有符号32位数</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">float</span>           float32;     <span class="comment">//单精度浮点数</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span>          float64;     <span class="comment">//双精度浮点数</span></div></pre></td></tr></table></figure>
<p>一般来说整形对应的*_t类型为：</p>
<ul>
<li>uint8_t为1字节    </li>
<li>uint16_t为2字节  </li>
<li>uint32_t为4字节    </li>
<li>uint64_t为8字节    </li>
</ul>
]]></content>
      
        <categories>
            
            <category> 语言学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux下patch的使用]]></title>
      <url>/2017/10/12/linux%E4%B8%8Bpatch%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="通过diff工具生成补丁-patch工具打上补丁"><a href="#通过diff工具生成补丁-patch工具打上补丁" class="headerlink" title="通过diff工具生成补丁, patch工具打上补丁"></a>通过diff工具生成补丁, patch工具打上补丁</h1><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="为单个文件生成补丁"><a href="#为单个文件生成补丁" class="headerlink" title="为单个文件生成补丁"></a>为单个文件生成补丁</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> diff -up linux-2.6.28.8/net/sunrpc/svc.orig.c linux-2.6.28.8/net/sunrpc/svc.c</span></div></pre></td></tr></table></figure>
<p>产生输出</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">diff -up linux-2.6.28.8/net/sunrpc/svc.orig.c 2009-03-17 08:50:04.000000000 +0800</div><div class="line">+++ linux-2.6.28.8/net/sunrpc/svc.c 2009-03-30 19:18:41.859375000 +0800</div><div class="line">@@ -1050,11 +1050,11 @@ svc_process(struct svc_rqst *rqstp)</div></pre></td></tr></table></figure>
<h3 id="为多个文件生成补丁"><a href="#为多个文件生成补丁" class="headerlink" title="为多个文件生成补丁"></a>为多个文件生成补丁</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> diff -uprN linux-2.6.28.8.orig/net/sunrpc/ linux-2.6.28.8/net/sunrpc/</span></div></pre></td></tr></table></figure>
<h3 id="打补丁"><a href="#打补丁" class="headerlink" title="打补丁"></a>打补丁</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> patch -p1 &lt; patch1.diff</span></div></pre></td></tr></table></figure>
<ul>
<li>-p1    忽略补丁中的路径的第一级目录</li>
</ul>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">diff [options] [source] [target] &gt; [name.patch]</div></pre></td></tr></table></figure>
<ul>
<li>-u 显示有差异行的前后几行(上下文), 默认是前后各3行, 这样, patch中带有更多的信息，也可以用-u5等指定输出更多上下文</li>
<li>-p 显示代码所在的c函数的信息.</li>
<li>-N选项确保补丁文件将正确地处理已经创建或删除文件的情况</li>
<li>-E, -b, -w, -B, –strip-trailing-cr 忽略各种空白</li>
<li>-r递归</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">patch -pNUM &lt; patchfile</div></pre></td></tr></table></figure>
<ul>
<li>-p Num忽略几层文件夹</li>
<li>-E选项说明如果发现了空文件，那么就删除它</li>
<li>-R取消打过的补丁</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 使用说明 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git 使用]]></title>
      <url>/2017/10/09/git-%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure>
<h1 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h1><h2 id="选择一个文件夹创建版本库"><a href="#选择一个文件夹创建版本库" class="headerlink" title="选择一个文件夹创建版本库"></a>选择一个文件夹创建版本库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
<p>使用 <code>ls -ah</code>查看隐藏的.git目录</p>
<h2 id="把文件添加到仓库"><a href="#把文件添加到仓库" class="headerlink" title="把文件添加到仓库"></a>把文件添加到仓库</h2><p>假设文件为readme.txt</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add readme.txt</div></pre></td></tr></table></figure>
<h2 id="把文件提交到仓库"><a href="#把文件提交到仓库" class="headerlink" title="把文件提交到仓库"></a>把文件提交到仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m &quot;wrote a readme file&quot;</div></pre></td></tr></table></figure>
<p><code>-m</code>后面输入的是本次提交的说明</p>
<p><code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件，如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add file1.txt</div><div class="line">$ git add file2.txt file3.txt</div><div class="line">$ git commit -m &quot;add 3 files.&quot;</div></pre></td></tr></table></figure>
<h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure>
<h2 id="查看修改"><a href="#查看修改" class="headerlink" title="查看修改"></a>查看修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff readme.txt</div></pre></td></tr></table></figure>
<h2 id="查看工作区和版本库里面最新版本的区别"><a href="#查看工作区和版本库里面最新版本的区别" class="headerlink" title="查看工作区和版本库里面最新版本的区别"></a>查看工作区和版本库里面最新版本的区别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff HEAD -- readme.txt</div></pre></td></tr></table></figure>
<h2 id="查看历史纪录"><a href="#查看历史纪录" class="headerlink" title="查看历史纪录"></a>查看历史纪录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git log</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git log --pretty=oneline</div></pre></td></tr></table></figure>
<p>会看到的一大串类似<code>3628164...882e1e0</code>的是<code>commit id</code>（版本号）</p>
<p>上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，往上100个版本写成<code>HEAD~100</code></p>
<h2 id="回退到上一个版本"><a href="#回退到上一个版本" class="headerlink" title="回退到上一个版本"></a>回退到上一个版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard HEAD^</div><div class="line">$ git reset --hard 3628164</div></pre></td></tr></table></figure>
<h2 id="查看以前的命令"><a href="#查看以前的命令" class="headerlink" title="查看以前的命令"></a>查看以前的命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reflog</div></pre></td></tr></table></figure>
<h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><h2 id="丢弃工作区的修改"><a href="#丢弃工作区的修改" class="headerlink" title="丢弃工作区的修改"></a>丢弃工作区的修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -- readme.txt</div></pre></td></tr></table></figure>
<p>即回到最近一次<code>git commit</code>或<code>git add</code>时的状态,用版本库里的版本替换工作区的版本</p>
<h2 id="把暂存区的修改撤销掉"><a href="#把暂存区的修改撤销掉" class="headerlink" title="把暂存区的修改撤销掉"></a>把暂存区的修改撤销掉</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset HEAD readme.txt</div></pre></td></tr></table></figure>
<p>即把暂存区的修改回退到工作区，撤销add</p>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ rm test.txt</div><div class="line">$ git rm test.txt</div><div class="line">$ git commit -m &quot;remove test.txt&quot;</div></pre></td></tr></table></figure>
<p>恢复</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -- test.txt</div></pre></td></tr></table></figure>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</div></pre></td></tr></table></figure>
<p>在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人</p>
<p>登陆GitHub，打开“Account settings”，“SSH Keys”页面</p>
<p>点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容</p>
<h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin https://github.com/[name]	/test.git</div><div class="line">$ git add .</div><div class="line">$ git config --global user.email &quot;you@example.com&quot;</div><div class="line">$ git config --global user.name &quot;Your Name&quot;</div><div class="line">$ git commit -m &apos;first commit&apos;</div><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure>
<p><code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来</p>
<h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p>把本地<code>master</code>分支的最新修改推送至GitHub</p>
<h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/...</div></pre></td></tr></table></figure>
<h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="创建并切换到分支dev上"><a href="#创建并切换到分支dev上" class="headerlink" title="创建并切换到分支dev上"></a>创建并切换到分支dev上</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branch dev</div><div class="line">$ git checkout dev</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b dev</div></pre></td></tr></table></figure>
<h2 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure>
<h2 id="合并指定分支到当前分支"><a href="#合并指定分支到当前分支" class="headerlink" title="合并指定分支到当前分支"></a>合并指定分支到当前分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge dev</div></pre></td></tr></table></figure>
<h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -d dev</div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>查看分支：<code>git branch</code></p>
<p>创建分支：<code>git branch &lt;name&gt;</code></p>
<p>切换分支：<code>git checkout &lt;name&gt;</code></p>
<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p>
<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
<h2 id="查看分支的合并情况"><a href="#查看分支的合并情况" class="headerlink" title="查看分支的合并情况"></a>查看分支的合并情况</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git log --graph --pretty=oneline --abbrev-commit</div></pre></td></tr></table></figure>
<h2 id="禁用fast-forward模式合并分支"><a href="#禁用fast-forward模式合并分支" class="headerlink" title="禁用fast-forward模式合并分支"></a>禁用fast-forward模式合并分支</h2><p>合并<code>dev</code>分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</div></pre></td></tr></table></figure>
<h2 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h2><p><code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本</p>
<p><img src="https://www.liaoxuefeng.com/files/attachments/001384909239390d355eb07d9d64305b6322aaf4edac1e3000/0" alt="git-br-policy"></p>
<h2 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h2><p>###储存现场</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash</div></pre></td></tr></table></figure>
<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash list</div></pre></td></tr></table></figure>
<h3 id="恢复现场"><a href="#恢复现场" class="headerlink" title="恢复现场"></a>恢复现场</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash pop</div></pre></td></tr></table></figure>
<p>恢复的同时把stash内容也删了</p>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git stash apply</div><div class="line">$ git stash drop</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash apply stash@&#123;0&#125;</div></pre></td></tr></table></figure>
<h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><h3 id="查看远程库的信息"><a href="#查看远程库的信息" class="headerlink" title="查看远程库的信息"></a>查看远程库的信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git remote</div><div class="line">$ git remote -v</div></pre></td></tr></table></figure>
<h3 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin dev</div></pre></td></tr></table></figure>
<h3 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b dev origin/dev</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --set-upstream dev origin/dev</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin dev</div></pre></td></tr></table></figure>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul>
<li>查看远程库信息，使用<code>git remote -v</code>；</li>
<li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li>
<li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li>
<li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li>
<li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li>
<li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 使用说明 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[symbolic execution]]></title>
      <url>/2017/09/19/symbolic-execution/</url>
      <content type="html"><![CDATA[<h1 id="Symbolic-execution"><a href="#Symbolic-execution" class="headerlink" title="Symbolic execution"></a>Symbolic execution</h1><p>​    在符号执行中，一个程序的输入被视为符号值。对于程序中每一个路径，或者执行或未执行分支的序列，我们收集路径条件(<em>path condition</em>)，即使程序必须执行那条路径的输入必须满足的条件集合。然后，为了确定导致错误的特定程序路径是否可行，我们将路径条件传递给决策过程。</p>
]]></content>
      
        
        <tags>
            
            <tag> symbolic execution </tag>
            
            <tag> fuzz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[symfuzz]]></title>
      <url>/2017/09/17/symfuzz/</url>
      <content type="html"><![CDATA[<h1 id="Program-Adaptive-Mutational-Fuzzing"><a href="#Program-Adaptive-Mutational-Fuzzing" class="headerlink" title="Program-Adaptive Mutational Fuzzing"></a>Program-Adaptive Mutational Fuzzing</h1><p>摘要：设计了一个算法来最大化在黑盒mutational fuzzing中发现的bug数(输入为程序和种子)。给出一个程序种子对，利用在执行轨迹上白盒符号分析去检测输入的bit 位置的依赖，再利用此依赖关系去计算该程序种子对的最优突变率。相比其他工具，发现了37.2%的更多的bug。</p>
<h2 id="1-INTRODUCTION"><a href="#1-INTRODUCTION" class="headerlink" title="1.INTRODUCTION"></a>1.INTRODUCTION</h2><p>mutational fuzzing很流行，很有用。fuzz configuration对fuzz的效果影响很大。</p>
<blockquote>
<p>The mutation ratio—the rate between the number of bits to modify and the number of total bits of a seed, which is used to confine the Hamming distance from the seed to generated test cases—is a continuous parameter, and thus it can have arbitrary many values</p>
</blockquote>
<p><strong>mutation ratio 突变比率 </strong>- 修改的位数与种子总位数之间的比例</p>
<p><strong>FCS</strong>(fuzz configuration scheduling)探索参数的各种可能组合。当参数空间很大，FCS很难，例如mutation ratio。现有方法是选一个或者在一定范围内随机选。主要问题是手动和非适应性。first，分析师根据经验选择fuzzing参数，比如zzuf。second,如果不手动很难适应程序。比如BFF,将突变率分成intervals，在此之上FCS。FuzzSim和zzuf可以使用默认突变率。AFL-fuzz采用几个位翻转突变策略，但固定位数。</p>
<p>研究的主要驱动问题在于：自适应的选择mutation ratio能帮助最大化发现的bug数吗？做了实验发现可以。所以问题在于如何计算这些突变率。</p>
<p>我们引入了一个名为<strong>SYMFUZZ</strong>的系统，该系统根据发现崩溃的概率确定给定程序 - 种子对的最佳突变率。SYMFUZZ通过利用白盒技术增加black-box突变fuzzing，分析程序执行，实现fuzzing的有效突变率。接着它使用生成的突变率来执行传统黑盒测试。虽然白盒技术经常需要大量成本分析，但是每个编程对只需要一次作为预处理步骤。</p>
<p>我们工作的主要思路，可以从程序的种子的输入位之间的依赖关系推导出最大化fuzzing效率的期望的突变比。</p>
<blockquote>
<p>Mutational fuzzing is a software testing technique where test cases are derived from a seed—typically a well-formed input— by partially mutating the seed.</p>
</blockquote>
<p><strong>mutational fuzzing</strong> 一种软件测试技术，其中测试用例来自种子 - 通常是良好的输入 - 通过部分突变种子。</p>
<p>本文使用mutational fuzzing分为两步，一是利用位翻转输入种子来产生测试用例。二是利用测试用例来测量program发现crash。我们只考虑了三个参数，program,seed 和mutation ratio. SYMFUZZ 比BFF发现了39.5%的更多的bug。</p>
<p>本文有如下贡献</p>
<ol>
<li><p>我们设计一个数学框架来形式化突变fuzzing，并展示如何对(用)输入位之间的依赖关系建立(建模)突变fuzzing的失败率。</p>
</li>
<li><p>我们引入一种称为突变比优化的新方法来选择突变率，以最大化发现bug的可能</p>
</li>
<li><p>我们结合了黑白测试去最大化fuzzing的效率。据我们所知，我们是第一个利用白盒分析来优化黑盒测试的参数的</p>
</li>
<li><p>我们设计了mutational fuzzing 框架SYMFUZZ并实现了我们的技术。这是第一个容易进行数学分析的突变模糊器</p>
</li>
<li><p>数据代码开源</p>
<p><a href="http://security.ece.cmu.edu/symfuzz/" target="_blank" rel="external">http://security.ece.cmu.edu/symfuzz/</a></p>
<p><a href="https://github.com/maurer/symfuzz" target="_blank" rel="external">https://github.com/maurer/symfuzz</a></p>
</li>
</ol>
<h2 id="2-Definition"><a href="#2-Definition" class="headerlink" title="2.Definition"></a>2.Definition</h2><h2 id="3-MUTATION-RATIO-OPTIMIZATION"><a href="#3-MUTATION-RATIO-OPTIMIZATION" class="headerlink" title="3.MUTATION RATIO OPTIMIZATION"></a>3.MUTATION RATIO OPTIMIZATION</h2><blockquote>
<p>a systematic way of deciding a set of mutation ratios for a given program and a seed</p>
</blockquote>
<p>确定给定程序和种子的一组突变率的系统方法</p>
<h3 id="A-Solving-for-an-Optimal-Mutation-Ratio"><a href="#A-Solving-for-an-Optimal-Mutation-Ratio" class="headerlink" title="A. Solving for an Optimal Mutation Ratio"></a>A. Solving for an Optimal Mutation Ratio</h3><h3 id="B-Estimating-r"><a href="#B-Estimating-r" class="headerlink" title="B. Estimating r"></a>B. Estimating r</h3><h2 id="4-INPUT-BIT-DEPENDENCE-INFERENCE"><a href="#4-INPUT-BIT-DEPENDENCE-INFERENCE" class="headerlink" title="4.INPUT-BIT DEPENDENCE INFERENCE"></a>4.INPUT-BIT DEPENDENCE INFERENCE</h2><p>IBDI(INPUT-BIT DEPENDENCE INFERENCE)是从程序执行计算种子中每个位的输入位依赖性的过程。</p>
<h2 id="5-SYSTEM-DESIGN"><a href="#5-SYSTEM-DESIGN" class="headerlink" title="5.SYSTEM DESIGN"></a>5.SYSTEM DESIGN</h2><p><img src="/2017/09/17/symfuzz/symfuzz_architucture.PNG" alt="symfuzz_architucture"></p>
<h3 id="5-1-Symbolic-analysis"><a href="#5-1-Symbolic-analysis" class="headerlink" title="5.1 Symbolic analysis"></a>5.1 Symbolic analysis</h3><p>on top of BAP</p>
<p>several optimizations</p>
<ul>
<li>tainted-block optimization</li>
<li>JIT and PD caching</li>
<li>set memoization</li>
</ul>
<h3 id="5-2-Mutational-Fuzzing"><a href="#5-2-Mutational-Fuzzing" class="headerlink" title="5.2 Mutational Fuzzing"></a>5.2 Mutational Fuzzing</h3><p>To selecting test cases that have the exact Hamming distance K from the seed s, for any given K.</p>
<p>we use Floyd-Bentley’s algorithm to compute the subset.</p>
<h3 id="5-3-Safe-Stack-Hash"><a href="#5-3-Safe-Stack-Hash" class="headerlink" title="5.3 Safe Stack Hash"></a>5.3 Safe Stack Hash</h3><p>The rationale is that if two crashes have the same call-stack traces, then they are likely to have an equivalent final program state and thus, it is an evidence of having the same root cause.</p>
<p><em>problem:it can put a single bug into multiple buckets</em></p>
<p><em>can significantly increase the number of bugs</em></p>
<p>we employ a technique, called <strong>safe stack hash</strong>, which stops traversing the call stack when it finds an unreachable return address.</p>
<h2 id="6-EVALUATION"><a href="#6-EVALUATION" class="headerlink" title="6. EVALUATION"></a>6. EVALUATION</h2><p>In total, we have spent 8,000 CPU hours fuzzing the applications, and found 114 previously unknown bugs based on our safe stack hash.</p>
<ol>
<li><p>相比BFF,zzuf</p>
<p> BFF found 43 bugs; zzuf found 38 bugs; and SYMFUZZ found 59 bugs</p>
</li>
<li><p>相比AFL-fuzz 1.45b(we replaced the first phase of AFLfuzz with SYMFUZZ’s mutation algorithm with mutation ratio optimization)</p>
<p> we found 54 bugs from the original AFL-fuzz, and 64 bugs from the modified AFL-fuzz</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> fuzz </tag>
            
            <tag> seed </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开始写博客了]]></title>
      <url>/2017/09/17/%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2%E4%BA%86/</url>
      <content type="html"><![CDATA[<p>终于用搭好了自己的博客的框架，准备开始写自己的博客了。</p>
<p>准备把自己平时做的东西，配置工具的方法以及看的论文的总结统统放到博客上，</p>
<p>哈哈哈！</p>
<hr>
]]></content>
      
        
    </entry>
    
  
  
</search>
